---
# Instructions: https://esphome.io/guides/getting_started_hassio.html
esphome:
  name: airgradient-${devicename}
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:
  logs:
    component: ERROR

# enable clock so we can get timestamps inside lambdas:
# if not using HA, use 'platform: sntp' for time instead
time:
  - platform: homeassistant
    id: ha_time

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  # https://esphome.io/components/wifi.html
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # Defaults to device name with no password
  ap:
    ssid: "Airgradient-${upper_devicename}"
captive_portal:

# Configuration for AirGradient DIY v2 device
# https://www.esphome-devices.com/devices/AirGradient-DIY/

uart:
  # https://esphome.io/components/uart.html#uart
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: D5
    baud_rate: 9600
    id: pms5003_uart

i2c:
  sda: D2
  scl: D1

sensor:
  - platform: pmsx003
    # https://esphome.io/components/sensor/pmsx003.html?highlight=pms5003
    type: PMSX003
    pm_1_0:
      id: pm1
      name: "${devicename}_pm1"
      device_class: pm1
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
    pm_2_5:
      id: pm2_5
      name: "${devicename}_pm2_5"
      device_class: pm25
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
      on_value:
        # create a pm2_5_aqi value whenever the pm2.5 is read from the sensor using the US AQI formula
        # borrowed from: https://forum.airgradient.com/t/on-device-pm2-5-to-aqi-conversion-with-esphome/750/4
        lambda: |-
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          if (id(pm2_5).state < 12.0) {
            // good
            // id(aqi_text).publish_state("Good");
            id(pm2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm2_5).state - 0.0) + 0.0);
          } else if (id(pm2_5).state < 35.4) {
            // moderate
            // id(aqi_text).publish_state("Moderate");
            id(pm2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm2_5).state - 12.1) + 51.0);
          } else if (id(pm2_5).state < 55.4) {
            // Unhealthy for Sensitive Groups
            // id(aqi_text).publish_state("Unhealthy for Sensitive Groups");
            id(pm2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm2_5).state - 35.5) + 101.0);
          } else if (id(pm2_5).state < 150.4) {
            // unhealthy
            // id(aqi_text).publish_state("Unhealthy");
            id(pm2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm2_5).state - 55.5) + 151.0);
          } else if (id(pm2_5).state < 250.4) {
            // very unhealthy
            // id(aqi_text).publish_state("Very Unhealthy");
            id(pm2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm2_5).state - 150.5) + 201.0);
          } else if (id(pm2_5).state < 350.4) {
            // hazardous
            // id(aqi_text).publish_state("Hazardous");
            id(pm2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm2_5).state - 250.5) + 301.0);
          } else if (id(pm2_5).state < 500.4) {
            // hazardous 2
            // id(aqi_text).publish_state("Hazardous");
            id(pm2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm2_5).state - 350.5) + 401.0);
          }
    pm_10_0:
      id: pm10
      name: "${devicename}_pm10"
      device_class: pm10
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
    uart_id: pms5003_uart

  # this takes the 'pm2_5_aqi' generated by the pm2_5 on_value action and makes it a sensor:
  - platform: template
    name: "${devicename}_aqi"
    id: pm2_5_aqi
    unit_of_measurement: "aqi"
    device_class: aqi
    icon: "mdi:air-filter"
    accuracy_decimals: 0

  - platform: senseair
    # https://esphome.io/components/sensor/senseair.html
    co2:
      id: co2
      name: "${devicename}_co2"
      device_class: carbon_dioxide
      unit_of_measurement: "ppm"
    update_interval: 10s
    uart_id: senseair_s8_uart

  - platform: sht3xd
    # https://esphome.io/components/sensor/sht3xd.html?highlight=sht31
    temperature:
      id: temp
      name: "${devicename}_temp"
      device_class: temperature
    humidity:
      id: humidity
      name: "${devicename}_humidity"
      device_class: humidity
    address: 0x44
    update_interval: 10s

  - platform: wifi_signal
    id: wifi_signal_db
    name: "${devicename}_wifi_signal_db"
    device_class: signal_strength
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    id: wifi_signal_pct
    name: "${devicename}_wifi_signal_pct"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: uptime
    id: device_uptime
    name: "${devicename}_uptime"

  # - platform: copy
  #   source_id: pm2_5
  #   id: pm_2_5
  #   internal: true  # don't publish to HA
  #   accuracy_decimals: 0
  #   # filters:
  #   # - sliding_window_moving_average:
  #   #     window_size: 480 #every 3 minutes for 24 hours
  #   #     send_every: 20 #hourly
  #   #     send_first_at: 20
  #   on_value:
  #     lambda: |-
  #       // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
  #       if (id(pm_2_5).state < 12.0) {
  #         // good
  #         // id(aqi_text).publish_state("Good");
  #         id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
  #       } else if (id(pm_2_5).state < 35.4) {
  #         // moderate
  #         // id(aqi_text).publish_state("Moderate");
  #         id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
  #       } else if (id(pm_2_5).state < 55.4) {
  #         // Unhealthy for Sensitive Groups
  #         // id(aqi_text).publish_state("Unhealthy for Sensitive Groups");
  #         id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
  #       } else if (id(pm_2_5).state < 150.4) {
  #         // unhealthy
  #         // id(aqi_text).publish_state("Unhealthy");
  #         id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
  #       } else if (id(pm_2_5).state < 250.4) {
  #         // very unhealthy
  #         // id(aqi_text).publish_state("Very Unhealthy");
  #         id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
  #       } else if (id(pm_2_5).state < 350.4) {
  #         // hazardous
  #         // id(aqi_text).publish_state("Hazardous");
  #         id(pm_2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
  #       } else if (id(pm_2_5).state < 500.4) {
  #         // hazardous 2
  #         // id(aqi_text).publish_state("Hazardous");
  #         id(pm_2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
  #       }

  # TODO: uncomment when the sgp41 sensor arrives
  # https://esphome.io/components/sensor/sgp4x.html
  # - platform: sgp4x
  #   voc:
  #     id: voc
  #     name: "${devicename}_voc"
  #     device_class: volatile_organic_compounds
  #   nox:
  #     id: nox
  #     name: "${devicename}_nox"
  #   compensation:
  #     humidity_source: humidity
  #     temperature_source: temp
  #   update_interval: 10s

font:
  - file: "./fonts/MonospaceTypewriter.ttf"
    id: mono
    size: 14

display:
  - platform: ssd1306_i2c
    id: oled
    model: "SH1106 128x64"
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(mono), "F:%.2f H:%.0f%%", ((id(temp).state * 1.8) + 32), id(humidity).state);
          it.printf(0, 16, id(mono), "AQI:%.0f CO2:%.0f", id(pm2_5_aqi).state, id(co2).state);
          it.printf(0, 32, id(mono), "NOX:na VOC:na");
          //it.printf(0, 32, id(mono), "NOX:%.0f VOC:%.0f", id(nox).state, id(voc).state);
          it.printf(0, 48, id(mono), "PM1/2.5/10:%.0f %.0f %.0f", id(pm1).state, id(pm2_5).state, id(pm10).state);

      - id: page2
        lambda: |-
          it.printf(0, 0, id(mono), "W:%.0f dBm %.0f%%", id(wifi_signal_db).state, id(wifi_signal_pct).state);
          it.printf(0, 16, id(mono), "UP:%.0f sec", id(device_uptime).state);

script:
  - id: send_udp
    parameters:
      msg: string
      host: string
      port: int
    then:
      - lambda: |-
          if (msg == "") {
            ESP_LOGD("send_udp", "empty payload, skipping udp send");
            return;
          }
          WiFiUDP Udp;
          IPAddress ip;

          if (WiFi.hostByName(host.c_str(), ip)) {
            Udp.beginPacket(ip, port);
            int n_bytes = Udp.write(msg.c_str());
            Udp.endPacket();
            ESP_LOGI("send_udp", "Sent %d bytes to %s:%d", n_bytes, host.c_str(), port);
          } else {
            ESP_LOGW("send_udp", "dns lookup failed. aborting send.");
          }

# Used to support POST request to send data to AirGradient
http_request:

interval:
  - interval: 5s
    # Cycle through page on display
    then:
      - display.page.show_next: oled
      - component.update: oled

  - interval: 60s
    # Send data to AirGradient API server
    then:
      - http_request.post:
          # AirGradient URL with the last 3 bytes of the MAC address in Hex format all lower case
          url: !lambda |-
            return "http://hw.airgradient.com/sensors/airgradient:" + get_mac_address().substr(6,11) + "/measures";
          headers:
            Content-Type: application/json
          # "!lambda return to_string(id(pm2_5).state);" Converts sensor output from double to string
          json:
            wifi: id(wifi_signal_db).state
            pm02: !lambda return to_string(id(pm2_5).state);
            rco2: !lambda return to_string(id(co2).state);
            atmp: !lambda return to_string(id(temp).state);
            rhum: !lambda return to_string(id(humidity).state);
            # tvoc: !lambda return to_string(id(tvoc).state);
            # nox: !lambda return to_string(id(nox).state);
          verify_ssl: false

  - interval: 10s
    then:
      - script.execute:
          id: send_udp
          host: !secret graphite_host
          port: !secret graphite_port
          msg: !lambda |-
            if (!id(ha_time).now().is_valid()) {
              ESP_LOGW("graphite", "time is not yet valid, skipping graphite");
              return "";
            }

            int intervalSecs = 10;
            auto now = (id(ha_time).now().timestamp / intervalSecs) * intervalSecs; // quantize

            // TODO add tvoc and nox
            //     "airgradient.office.tvoc "     + to_string(id(tvoc).state)              + " " + to_string(now) + "\n" +
            //     "airgradient.office.nox "      + to_string(id(nox).state)               + " " + to_string(now) + "\n" +
            return "airgradient.office.co2 "      + to_string(id(co2).state)               + " " + to_string(now) + "\n" +
                   "airgradient.office.pm1 "      + to_string(id(pm1).state)               + " " + to_string(now) + "\n" +
                   "airgradient.office.pm25 "     + to_string(id(pm2_5).state)             + " " + to_string(now) + "\n" +
                   "airgradient.office.pm25_aqi " + to_string(id(pm2_5_aqi).state)         + " " + to_string(now) + "\n" +
                   "airgradient.office.pm10 "     + to_string(id(pm10).state)              + " " + to_string(now) + "\n" +
                   "airgradient.office.wifi "     + to_string(id(wifi_signal_db).state)    + " " + to_string(now) + "\n" +
                   "airgradient.office.wifi_pct " + to_string(id(wifi_signal_pct).state)   + " " + to_string(now) + "\n" +
                   "airgradient.office.humidity " + to_string(id(humidity).state)          + " " + to_string(now) + "\n" +
                   "airgradient.office.uptime "   + to_string(id(device_uptime).state)     + " " + to_string(now) + "\n" +
                   "airgradient.office.temp_f "   + to_string((id(temp).state * 1.8) + 32) + " " + to_string(now) + "\n" +
                   "airgradient.office.temp "     + to_string(id(temp).state)              + " " + to_string(now) + "\n";
